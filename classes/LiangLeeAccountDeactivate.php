<?php
/** 
 * Liang Lee Account Deactivate
 * @package LiangLeeAccountDeactivate
 * @subpackage LiangLeeAccountDeactivate.Class
 * @author Liang Lee
 * @copyright LIANG LEE 2013
 * @ide The Code is Generated by Liang Lee php IDE.
 * @File LiangLeeAccountDeactivate.php
 */
class LiangLee_AccountDeactivate{

/**
 * Validate a user , to make sure we have correct user.
 *
 * uservalidate();
 *
 * @params int $guid  a user id;
 * @params string $activate if deactivating then false; else true;
 *
 * @return user id and premission;
 */	
public function uservalidate($guid, $activate = false, $code = false){
        if(!empty($guid) && $activate === false){
                  if(elgg_get_logged_in_user_entity()->guid == $guid || elgg_is_admin_logged_in()){
		              $this->uservalidate = $guid;
					  return true;
		          } 
		} 
		elseif($activate === true){
			       $validate = $code;
			       if($validate ==  md5($guid.date('dmy'))){
				    $this->useractivate = $guid;
					$this->uservalidate = true;
				    return true;   
				   }
		}
   return false;		
}
/**
 * Prepare user activate/deactive statement
 *
 * @warning SELF:uservalidate is needed
 * SELF::uservalidate();
 *
 * @arg $this->uservalidate  premission
 *
 * @return statement;
 */
public function USER($do = ''){
global $CONFIG;	
	      if(isset($do) 
				   &&!empty($do)
				   && $do == 'deactivate'
				   && isset($this->uservalidate)
				   && is_numeric($this->uservalidate)){
		  $guid = (int)$this->uservalidate;  
           return  "UPDATE {$CONFIG->dbprefix}entities
					SET enabled = 'no'
					WHERE guid = $guid";
					
		  } 
		  elseif(isset($do) 
				   &&!empty($do)
				   && $do == 'activate'
				   && isset($this->useractivate)
				   && is_numeric($this->useractivate)){
          $guid = (int)$this->useractivate;
		  return  "UPDATE {$CONFIG->dbprefix}entities
					SET enabled = 'yes'
					WHERE guid = $guid";
					
		   
		  }
		  return false;	  
}
/**
 * Deactivate a user account
 *
 * @warning SELF:USER is needed
 * SELF::USER();
 *
 * @arg $this->uservalidate  premission
 *
 * @return true;
 */
public function deactivate(){
      if(isset($this->uservalidate)){
       		$USER = new LiangLeeUser;
     		$deactivate = LiangLee_AccountDeactivate::USER('deactivate');
			if(update_data($deactivate)){
			lianglee_set_usersettings(array(
                'name' => 'liang_lee_account_deactivate',
                'value' => 1,
                'user_guid' => (int)$USER->currentEntityGuid(),
                'plugin_id' => 'LiangLeeAccountDeactivate'
             ));   
		   return true;
	       }
		unset($this->uservalidate);  
	  }
return false;	
}
/**
 * Activate a user account
 *
 * @warning SELF:USER is needed
 * SELF::USER();
 *
 * @arg $this->uservalidate  premission
 *
 * @return true;
 */
public function activate(){
if(isset($this->uservalidate) 
			 &&  !is_numeric($this->uservalidate)
			 && $this->uservalidate == true){
                  $activate = LiangLee_AccountDeactivate::USER('activate');
	              if(update_data($activate)){
		            	lianglee_set_usersettings(array(
                        'name' => 'liang_lee_account_deactivate',
                        'value' => 0,
                        'user_guid' => (int)$this->useractivate,
                        'plugin_id' => 'LiangLeeAccountDeactivate'
                        ));   
	            	   return true;
	              }
		unset($this->uservalidate);  
	  }
return false;	
}
/**
 * Check user account is acivated or deactivated
 *
 * @warning SELF:USER is needed
 * SELF::USER();
 *
 * @arg $guid int id of user
 *
 * @return true;
 */
public function elgg_is_account_deactive($guid, $username){
		access_show_hidden_entities(true);
		if(!isset($username)){
			$entity = get_entity((int)$guid)->guid;
		}
		 else {
			$entity = get_user_by_username($username)->guid; 
		 }
        $accountstatus = elgg_get_plugin_user_setting(
						'liang_lee_account_deactivate', 
						 $entity, 
						 'LiangLeeAccountDeactivate'
						 );
		
		if($accountstatus == 0){
		     return true;	
		}
return false;		
}
/**
 * Show a account activate action url
 *
 * @warning request should be  ajax
 * elgg_is_xhr()
 *
 * @uses $this->action()
 *
 * @return url;
 */
public function action(){
 return lee_baseurl.'mod/LiangLeeAccountDeactivate/actions/activate.php';	
}
/**
 * Send a activation code to user email
 *
 * SELF::sendactivation();
 *
 * @arg $user (str) username
 *
 * @return true;
 */
public function sendactivation($username){
   access_show_hidden_entities(true);
   $user = get_user_by_username($username);
           if ($user instanceof ElggUser) {
                   $code =  md5($user->guid.date('dmy'));
                   $link = lee_baseurl."account/activate/{$code}/{$user->guid}/";
                   $email = elgg_echo('lianglee:activation:email', array($code,  $link));
                   $send =  notify_user(
									  $user->guid, 
									  elgg_get_site_entity()->guid, 
									  elgg_echo('lianglee:activation:email:subject'), 
									  $email, array(), 'email'
									  );
				 if($send){
					return true;
				 }

            }
	return false;
		
}


}